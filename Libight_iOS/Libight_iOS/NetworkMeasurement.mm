// Part of MeasurementKit <https://measurement-kit.github.io/>.
// MeasurementKit is free software. See AUTHORS and LICENSE for more
// information on the copying conditions.

#import "NetworkMeasurement.h"

#import "ight/common/async.hpp"
#import "ight/common/pointer.hpp"

// Make sure that logging messages not bound to any specific test (mainly
// messages generated by the async thread) end up to stderr via NSLog()
static void init_async_logger() {
    static bool initialized = false;
    if (!initialized) {
        ight_set_verbose(1);
        // XXX Ok to call NSLog() from another thread?
        ight_set_logger([](const char *s) {
            NSLog(@"%s", s);
        });
        initialized = true;
    }
}

// Access static async instance. Currently there is a static instance to
// guarantee that such instance has the same lifecycle of the App
static ight::common::async::Async& get_async() {
    static ight::common::async::Async async;
    init_async_logger();
    return async;
}

@implementation NetworkMeasurement

-(id) init {
    self = [super init];
    self.logLines = [[NSMutableArray alloc] init];
    return self;
}

-(void) run {
    // Nothing to do here
}
@end


@implementation DNSInjection : NetworkMeasurement

-(id) init {
    self = [super init];
    self.name = @"dns_injection";
    return self;
}

- (void) run {
    ight::common::async::Async& async = get_async();
    NSBundle *bundle = [NSBundle mainBundle];
    NSString *path = [bundle pathForResource:@"hosts" ofType:@"txt"];
    const char *ppath = [path UTF8String];
    ight::common::settings::Settings settings({{"nameserver", "8.8.8.8:53"}});
    ight::common::pointer::SharedPointer<
        ight::ooni::dns_injection::DNSInjection> test{
            new ight::ooni::dns_injection::DNSInjection(ppath, settings)
        };
    test->set_log_verbose(1);
    // XXX OK to send messages to object from another thread?
    test->set_log_function([self](const char *s) {
        [self.logLines addObject:[NSString stringWithUTF8String:s]];
        NSLog(@"%s", s);
    });
    async.run_test(test);
}


@end

@implementation HTTPInvalidRequestLine : NetworkMeasurement

-(id) init {
    self = [super init];
    self.name = @"http_invalid_request_line";
    return self;
}

-(void) run {
    ight::common::async::Async& async = get_async();
    ight::common::settings::Settings settings({
        {"backend", "http://www.google.com/"}
    });
    ight::common::pointer::SharedPointer<
        ight::ooni::http_invalid_request_line::HTTPInvalidRequestLine> test{
            new ight::ooni::http_invalid_request_line::HTTPInvalidRequestLine(
                settings)};
    test->set_log_verbose(1);
    // XXX OK to send messages to object from another thread?
    test->set_log_function([self](const char *s) {
        [self.logLines addObject:[NSString stringWithUTF8String:s]];
        NSLog(@"%s", s);
    });
    async.run_test(test);
}

@end

@implementation TCPConnect : NetworkMeasurement

-(id) init {
    self = [super init];
    self.name = @"tcp_connect";
    return self;
}

-(void) run {
    ight::common::async::Async& async = get_async();
    NSBundle *bundle = [NSBundle mainBundle];
    NSString *path = [bundle pathForResource:@"hosts" ofType:@"txt"];
    const char *ppath = [path UTF8String];
    ight::common::settings::Settings settings({{"port", "80"}});
    ight::common::pointer::SharedPointer<
        ight::ooni::tcp_connect::TCPConnect> test{
            new ight::ooni::tcp_connect::TCPConnect(ppath, settings)};
    test->set_log_verbose(1);
    // XXX OK to send messages to object from another thread?
    test->set_log_function([self](const char *s) {
        [self.logLines addObject:[NSString stringWithUTF8String:s]];
        NSLog(@"%s", s);
    });
    async.run_test(test);
}

@end